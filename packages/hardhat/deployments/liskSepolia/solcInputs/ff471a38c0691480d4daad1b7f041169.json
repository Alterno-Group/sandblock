{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/SandBlock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title SandBlock\n * @dev Manages tokenized energy projects with tiered interest rates and scheduled paybacks\n *\n * Interest Rates (APY):\n * - < 2000 USDT: 5% per year\n * - 2000 - 20000 USDT: 7% per year\n * - > 20000 USDT: 9% per year\n *\n * Payback Schedule:\n * - Weekly interest payments after project completion\n * - Principal payback: 20% per year starting 2 years after target reached\n */\ncontract SandBlock is Ownable, ReentrancyGuard {\n    IERC20 public usdtToken;\n\n    // Admin management\n    mapping(address => bool) public admins;\n\n    uint256 public constant WEEK_IN_SECONDS = 7 days;\n    uint256 public constant YEAR_IN_SECONDS = 365 days;\n    uint256 public constant PRINCIPAL_PAYBACK_DELAY = 2 * YEAR_IN_SECONDS;\n    uint256 public constant PRINCIPAL_PAYBACK_RATE = 20; // 20% per year\n\n    // Interest rate tiers (in basis points: 500 = 5%)\n    uint256 public constant TIER1_RATE = 500;   // 5% APY\n    uint256 public constant TIER2_RATE = 700;   // 7% APY\n    uint256 public constant TIER3_RATE = 900;   // 9% APY\n\n    uint256 public constant TIER1_MAX = 2000 * 10**6;    // 2000 USDT (assuming 6 decimals)\n    uint256 public constant TIER2_MAX = 20000 * 10**6;   // 20000 USDT\n\n    // Project types\n    enum ProjectType {\n        Solar,\n        Wind,\n        Hydro,\n        Thermal,\n        Geothermal,\n        Biomass,\n        Other\n    }\n\n    struct EnergyRecord {\n        uint256 energyKWh;\n        uint256 cost;\n        uint256 timestamp;\n        string notes;\n    }\n\n    struct Project {\n        uint256 id;\n        string name;\n        string description;\n        string location;\n        ProjectType projectType;        // Type of energy project\n        uint256 targetAmount;           // Target funding in USDT\n        uint256 totalInvested;          // Total USDT invested\n        uint256 energyProduced;         // Total energy produced in kWh\n        uint256 totalEnergyCost;        // Total cost of energy production\n        address projectOwner;           // Project creator/owner\n        bool isActive;                  // Whether project accepts investments\n        bool isCompleted;               // Whether construction is completed\n        bool isFailed;                  // Whether funding failed (deadline passed)\n        uint256 createdAt;              // Project creation timestamp\n        uint256 fundingDeadline;        // Deadline to reach funding target\n        uint256 fundingCompletedAt;     // When target amount was reached\n        uint256 constructionCompletedAt;// When construction was completed\n    }\n\n    struct Investment {\n        uint256 principalAmount;        // Original investment amount\n        uint256 principalRemaining;     // Remaining principal to be paid back\n        uint256 lastInterestClaim;      // Last time interest was claimed\n        uint256 lastPrincipalClaim;     // Last time principal was claimed\n        uint256 totalInterestClaimed;   // Total interest claimed\n        uint256 totalPrincipalClaimed;  // Total principal returned\n    }\n\n    // Project ID => Project details\n    mapping(uint256 => Project) public projects;\n\n    // Project ID => Investor address => Investment details\n    mapping(uint256 => mapping(address => Investment)) public investments;\n\n    // Project ID => List of investors\n    mapping(uint256 => address[]) public projectInvestors;\n\n    // Project ID => Energy production records\n    mapping(uint256 => EnergyRecord[]) public energyRecords;\n\n    uint256 public projectCount;\n\n    // Events\n    event ProjectCreated(\n        uint256 indexed projectId,\n        string name,\n        address indexed owner,\n        uint256 targetAmount\n    );\n\n    event InvestmentMade(\n        uint256 indexed projectId,\n        address indexed investor,\n        uint256 amount\n    );\n\n    event FundingCompleted(\n        uint256 indexed projectId,\n        uint256 timestamp\n    );\n\n    event ConstructionCompleted(\n        uint256 indexed projectId,\n        uint256 timestamp\n    );\n\n    event EnergyRecorded(\n        uint256 indexed projectId,\n        uint256 energyAmount,\n        uint256 cost,\n        uint256 timestamp,\n        string notes\n    );\n\n    event InterestClaimed(\n        uint256 indexed projectId,\n        address indexed investor,\n        uint256 amount\n    );\n\n    event PrincipalClaimed(\n        uint256 indexed projectId,\n        address indexed investor,\n        uint256 amount\n    );\n\n    event FundingFailed(\n        uint256 indexed projectId,\n        uint256 timestamp,\n        uint256 totalInvested,\n        uint256 targetAmount\n    );\n\n    event RefundClaimed(\n        uint256 indexed projectId,\n        address indexed investor,\n        uint256 amount\n    );\n\n    event AdminAdded(address indexed admin);\n    event AdminRemoved(address indexed admin);\n\n    modifier onlyOwnerOrAdmin() {\n        require(msg.sender == owner() || admins[msg.sender], \"Not authorized: must be owner or admin\");\n        _;\n    }\n\n    constructor(address _usdtToken) {\n        usdtToken = IERC20(_usdtToken);\n    }\n\n    /**\n     * @dev Add an admin who can create and edit projects\n     * @param _admin Address to add as admin\n     */\n    function addAdmin(address _admin) external onlyOwner {\n        require(_admin != address(0), \"Invalid admin address\");\n        require(!admins[_admin], \"Already an admin\");\n        admins[_admin] = true;\n        emit AdminAdded(_admin);\n    }\n\n    /**\n     * @dev Remove an admin\n     * @param _admin Address to remove from admins\n     */\n    function removeAdmin(address _admin) external onlyOwner {\n        require(admins[_admin], \"Not an admin\");\n        admins[_admin] = false;\n        emit AdminRemoved(_admin);\n    }\n\n    /**\n     * @dev Check if an address is an admin\n     * @param _address Address to check\n     */\n    function isAdmin(address _address) external view returns (bool) {\n        return admins[_address];\n    }\n\n    /**\n     * @dev Calculate interest rate based on investment amount (in basis points)\n     */\n    function getInterestRate(uint256 _amount) public pure returns (uint256) {\n        if (_amount < TIER1_MAX) {\n            return TIER1_RATE;\n        } else if (_amount < TIER2_MAX) {\n            return TIER2_RATE;\n        } else {\n            return TIER3_RATE;\n        }\n    }\n\n    /**\n     * @dev Create a new energy project\n     */\n    function createProject(\n        string memory _name,\n        string memory _description,\n        string memory _location,\n        ProjectType _projectType,\n        uint256 _targetAmount,\n        uint256 _fundingDurationDays\n    ) external onlyOwnerOrAdmin returns (uint256) {\n        require(_targetAmount > 0, \"Target amount must be greater than 0\");\n        require(_fundingDurationDays > 0, \"Funding duration must be greater than 0\");\n        require(_fundingDurationDays <= 365, \"Funding duration cannot exceed 1 year\");\n\n        uint256 projectId = projectCount++;\n        uint256 fundingDeadline = block.timestamp + (_fundingDurationDays * 1 days);\n\n        projects[projectId] = Project({\n            id: projectId,\n            name: _name,\n            description: _description,\n            location: _location,\n            projectType: _projectType,\n            targetAmount: _targetAmount,\n            totalInvested: 0,\n            energyProduced: 0,\n            totalEnergyCost: 0,\n            projectOwner: msg.sender,\n            isActive: true,\n            isCompleted: false,\n            isFailed: false,\n            createdAt: block.timestamp,\n            fundingDeadline: fundingDeadline,\n            fundingCompletedAt: 0,\n            constructionCompletedAt: 0\n        });\n\n        emit ProjectCreated(projectId, _name, msg.sender, _targetAmount);\n\n        return projectId;\n    }\n\n    /**\n     * @dev Invest in a project with USDT\n     */\n    function investInProject(uint256 _projectId, uint256 _amount) external nonReentrant {\n        Project storage project = projects[_projectId];\n\n        require(project.isActive, \"Project is not active\");\n        require(!project.isCompleted, \"Project construction is completed\");\n        require(!project.isFailed, \"Project funding has failed\");\n        require(block.timestamp <= project.fundingDeadline, \"Funding deadline has passed\");\n        require(_amount > 0, \"Investment amount must be greater than 0\");\n        require(\n            project.totalInvested + _amount <= project.targetAmount,\n            \"Investment exceeds target amount\"\n        );\n\n        // Transfer USDT from investor to contract\n        require(\n            usdtToken.transferFrom(msg.sender, address(this), _amount),\n            \"USDT transfer failed\"\n        );\n\n        // Update or create investment record\n        Investment storage investment = investments[_projectId][msg.sender];\n\n        if (investment.principalAmount == 0) {\n            // New investor\n            projectInvestors[_projectId].push(msg.sender);\n            investment.lastInterestClaim = block.timestamp;\n            investment.lastPrincipalClaim = block.timestamp;\n        }\n\n        investment.principalAmount += _amount;\n        investment.principalRemaining += _amount;\n        project.totalInvested += _amount;\n\n        // Check if funding is complete\n        if (project.totalInvested >= project.targetAmount && project.fundingCompletedAt == 0) {\n            project.fundingCompletedAt = block.timestamp;\n            emit FundingCompleted(_projectId, block.timestamp);\n        }\n\n        emit InvestmentMade(_projectId, msg.sender, _amount);\n    }\n\n    /**\n     * @dev Mark project funding as failed if deadline passed without reaching target\n     * Can be called by anyone after deadline\n     */\n    function markFundingFailed(uint256 _projectId) external {\n        Project storage project = projects[_projectId];\n\n        require(!project.isFailed, \"Project already marked as failed\");\n        require(!project.isCompleted, \"Project is already completed\");\n        require(project.fundingCompletedAt == 0, \"Project funding was successful\");\n        require(block.timestamp > project.fundingDeadline, \"Funding deadline not reached yet\");\n        require(project.totalInvested < project.targetAmount, \"Target amount was reached\");\n\n        project.isFailed = true;\n        project.isActive = false;\n\n        emit FundingFailed(_projectId, block.timestamp, project.totalInvested, project.targetAmount);\n    }\n\n    /**\n     * @dev Claim refund for failed project\n     */\n    function claimRefund(uint256 _projectId) external nonReentrant {\n        Project storage project = projects[_projectId];\n        Investment storage investment = investments[_projectId][msg.sender];\n\n        require(project.isFailed, \"Project has not failed\");\n        require(investment.principalAmount > 0, \"No investment to refund\");\n        require(investment.principalRemaining > 0, \"Refund already claimed\");\n\n        uint256 refundAmount = investment.principalRemaining;\n        investment.principalRemaining = 0;\n\n        // Transfer refund to investor\n        require(\n            usdtToken.transfer(msg.sender, refundAmount),\n            \"USDT transfer failed\"\n        );\n\n        emit RefundClaimed(_projectId, msg.sender, refundAmount);\n    }\n\n    /**\n     * @dev Check if project funding has failed (deadline passed without reaching target)\n     */\n    function isProjectFundingFailed(uint256 _projectId) public view returns (bool) {\n        Project storage project = projects[_projectId];\n\n        if (project.isFailed) {\n            return true;\n        }\n\n        return (\n            block.timestamp > project.fundingDeadline &&\n            project.fundingCompletedAt == 0 &&\n            project.totalInvested < project.targetAmount &&\n            !project.isCompleted\n        );\n    }\n\n    /**\n     * @dev Calculate available weekly interest for an investor\n     */\n    function calculateAvailableInterest(uint256 _projectId, address _investor)\n        public\n        view\n        returns (uint256)\n    {\n        Project storage project = projects[_projectId];\n        Investment storage investment = investments[_projectId][_investor];\n\n        // Interest can only be claimed after construction is completed\n        if (!project.isCompleted || investment.principalAmount == 0) {\n            return 0;\n        }\n\n        uint256 timeSinceLastClaim = block.timestamp - investment.lastInterestClaim;\n        uint256 weeksElapsed = timeSinceLastClaim / WEEK_IN_SECONDS;\n\n        if (weeksElapsed == 0) {\n            return 0;\n        }\n\n        // Calculate interest based on tiered rates\n        uint256 interestRate = getInterestRate(investment.principalAmount);\n\n        // Annual interest = principal * rate / 10000\n        // Weekly interest = annual interest / 52\n        uint256 weeklyInterest = (investment.principalRemaining * interestRate) / (10000 * 52);\n        uint256 totalInterest = weeklyInterest * weeksElapsed;\n\n        return totalInterest;\n    }\n\n    /**\n     * @dev Calculate available principal payback for an investor\n     */\n    function calculateAvailablePrincipal(uint256 _projectId, address _investor)\n        public\n        view\n        returns (uint256)\n    {\n        Project storage project = projects[_projectId];\n        Investment storage investment = investments[_projectId][_investor];\n\n        // Principal can only be claimed 2 years after funding completed\n        if (project.fundingCompletedAt == 0 || investment.principalAmount == 0) {\n            return 0;\n        }\n\n        uint256 timeSinceFundingCompleted = block.timestamp - project.fundingCompletedAt;\n\n        if (timeSinceFundingCompleted < PRINCIPAL_PAYBACK_DELAY) {\n            return 0;\n        }\n\n        // Calculate the effective start time for principal payback (2 years after funding)\n        uint256 principalPaybackStartTime = project.fundingCompletedAt + PRINCIPAL_PAYBACK_DELAY;\n\n        // Use the later of: principal payback start time OR last claim time\n        uint256 effectiveLastClaim = investment.lastPrincipalClaim > principalPaybackStartTime\n            ? investment.lastPrincipalClaim\n            : principalPaybackStartTime;\n\n        uint256 timeSinceLastClaim = block.timestamp - effectiveLastClaim;\n        uint256 yearsElapsed = timeSinceLastClaim / YEAR_IN_SECONDS;\n\n        if (yearsElapsed == 0) {\n            return 0;\n        }\n\n        // 20% of original principal per year\n        uint256 yearlyPayback = (investment.principalAmount * PRINCIPAL_PAYBACK_RATE) / 100;\n        uint256 totalPayback = yearlyPayback * yearsElapsed;\n\n        // Don't exceed remaining principal\n        if (totalPayback > investment.principalRemaining) {\n            return investment.principalRemaining;\n        }\n\n        return totalPayback;\n    }\n\n    /**\n     * @dev Claim weekly interest payments\n     */\n    function claimInterest(uint256 _projectId) external nonReentrant {\n        uint256 availableInterest = calculateAvailableInterest(_projectId, msg.sender);\n        require(availableInterest > 0, \"No interest available to claim\");\n\n        Investment storage investment = investments[_projectId][msg.sender];\n\n        // Update claim time to the last complete week\n        uint256 timeSinceLastClaim = block.timestamp - investment.lastInterestClaim;\n        uint256 weeksElapsed = timeSinceLastClaim / WEEK_IN_SECONDS;\n        investment.lastInterestClaim += (weeksElapsed * WEEK_IN_SECONDS);\n        investment.totalInterestClaimed += availableInterest;\n\n        // Transfer interest to investor\n        require(\n            usdtToken.transfer(msg.sender, availableInterest),\n            \"USDT transfer failed\"\n        );\n\n        emit InterestClaimed(_projectId, msg.sender, availableInterest);\n    }\n\n    /**\n     * @dev Claim principal payback (20% per year starting 2 years after funding)\n     */\n    function claimPrincipal(uint256 _projectId) external nonReentrant {\n        Project storage project = projects[_projectId];\n        uint256 availablePrincipal = calculateAvailablePrincipal(_projectId, msg.sender);\n        require(availablePrincipal > 0, \"No principal available to claim\");\n\n        Investment storage investment = investments[_projectId][msg.sender];\n\n        // Calculate the effective start time for principal payback\n        uint256 principalPaybackStartTime = project.fundingCompletedAt + PRINCIPAL_PAYBACK_DELAY;\n\n        // Use the later of: principal payback start time OR last claim time\n        uint256 effectiveLastClaim = investment.lastPrincipalClaim > principalPaybackStartTime\n            ? investment.lastPrincipalClaim\n            : principalPaybackStartTime;\n\n        // Update claim time based on complete years elapsed\n        uint256 timeSinceLastClaim = block.timestamp - effectiveLastClaim;\n        uint256 yearsElapsed = timeSinceLastClaim / YEAR_IN_SECONDS;\n        investment.lastPrincipalClaim = effectiveLastClaim + (yearsElapsed * YEAR_IN_SECONDS);\n\n        investment.principalRemaining -= availablePrincipal;\n        investment.totalPrincipalClaimed += availablePrincipal;\n\n        // Transfer principal to investor\n        require(\n            usdtToken.transfer(msg.sender, availablePrincipal),\n            \"USDT transfer failed\"\n        );\n\n        emit PrincipalClaimed(_projectId, msg.sender, availablePrincipal);\n    }\n\n    /**\n     * @dev Record energy produced with cost (only project owner can call)\n     */\n    function recordEnergyProduction(\n        uint256 _projectId,\n        uint256 _energyKWh,\n        uint256 _cost,\n        string memory _notes\n    ) external onlyOwnerOrAdmin {\n        Project storage project = projects[_projectId];\n        require(project.isCompleted, \"Project must be completed first\");\n        require(_energyKWh > 0, \"Energy amount must be greater than 0\");\n\n        project.energyProduced += _energyKWh;\n        project.totalEnergyCost += _cost;\n\n        // Store energy record\n        energyRecords[_projectId].push(EnergyRecord({\n            energyKWh: _energyKWh,\n            cost: _cost,\n            timestamp: block.timestamp,\n            notes: _notes\n        }));\n\n        emit EnergyRecorded(_projectId, _energyKWh, _cost, block.timestamp, _notes);\n    }\n\n    /**\n     * @dev Mark project construction as completed (only project owner)\n     */\n    function completeConstruction(uint256 _projectId) external onlyOwnerOrAdmin {\n        Project storage project = projects[_projectId];\n        require(!project.isCompleted, \"Project already completed\");\n        require(project.fundingCompletedAt > 0, \"Funding not completed yet\");\n\n        project.isCompleted = true;\n        project.isActive = false;\n        project.constructionCompletedAt = block.timestamp;\n\n        // Initialize interest claim time for all investors\n        address[] storage investors = projectInvestors[_projectId];\n        for (uint256 i = 0; i < investors.length; i++) {\n            investments[_projectId][investors[i]].lastInterestClaim = block.timestamp;\n        }\n\n        emit ConstructionCompleted(_projectId, block.timestamp);\n    }\n\n    /**\n     * @dev Deposit funds to contract for payouts (project owner)\n     */\n    function depositPayoutFunds(uint256 _amount) external nonReentrant {\n        require(_amount > 0, \"Amount must be greater than 0\");\n\n        require(\n            usdtToken.transferFrom(msg.sender, address(this), _amount),\n            \"USDT transfer failed\"\n        );\n    }\n\n    /**\n     * @dev Get project basic info\n     */\n    function getProject(uint256 _projectId)\n        external\n        view\n        returns (\n            string memory name,\n            string memory description,\n            string memory location,\n            ProjectType projectType,\n            uint256 targetAmount,\n            uint256 totalInvested,\n            uint256 energyProduced,\n            uint256 totalEnergyCost,\n            address projectOwner,\n            bool isActive,\n            bool isCompleted,\n            bool isFailed\n        )\n    {\n        Project storage project = projects[_projectId];\n        return (\n            project.name,\n            project.description,\n            project.location,\n            project.projectType,\n            project.targetAmount,\n            project.totalInvested,\n            project.energyProduced,\n            project.totalEnergyCost,\n            project.projectOwner,\n            project.isActive,\n            project.isCompleted,\n            project.isFailed\n        );\n    }\n\n    /**\n     * @dev Get project timeline info\n     */\n    function getProjectTimeline(uint256 _projectId)\n        external\n        view\n        returns (\n            uint256 createdAt,\n            uint256 fundingDeadline,\n            uint256 fundingCompletedAt,\n            uint256 constructionCompletedAt\n        )\n    {\n        Project storage project = projects[_projectId];\n        return (\n            project.createdAt,\n            project.fundingDeadline,\n            project.fundingCompletedAt,\n            project.constructionCompletedAt\n        );\n    }\n\n    /**\n     * @dev Get energy records for a project\n     */\n    function getEnergyRecords(uint256 _projectId)\n        external\n        view\n        returns (EnergyRecord[] memory)\n    {\n        return energyRecords[_projectId];\n    }\n\n    /**\n     * @dev Get investment details for an investor\n     */\n    function getInvestment(uint256 _projectId, address _investor)\n        external\n        view\n        returns (\n            uint256 principalAmount,\n            uint256 principalRemaining,\n            uint256 interestRate,\n            uint256 availableInterest,\n            uint256 availablePrincipal,\n            uint256 totalInterestClaimed,\n            uint256 totalPrincipalClaimed\n        )\n    {\n        Investment storage investment = investments[_projectId][_investor];\n        return (\n            investment.principalAmount,\n            investment.principalRemaining,\n            getInterestRate(investment.principalAmount),\n            calculateAvailableInterest(_projectId, _investor),\n            calculateAvailablePrincipal(_projectId, _investor),\n            investment.totalInterestClaimed,\n            investment.totalPrincipalClaimed\n        );\n    }\n\n    /**\n     * @dev Get all investors for a project\n     */\n    function getProjectInvestors(uint256 _projectId)\n        external\n        view\n        returns (address[] memory)\n    {\n        return projectInvestors[_projectId];\n    }\n\n    /**\n     * @dev Get contract USDT balance\n     */\n    function getContractBalance() external view returns (uint256) {\n        return usdtToken.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Toggle project active status (only project owner)\n     */\n    function toggleProjectStatus(uint256 _projectId) external {\n        Project storage project = projects[_projectId];\n\n        require(msg.sender == project.projectOwner, \"Only project owner\");\n        require(!project.isCompleted, \"Cannot toggle completed project\");\n\n        project.isActive = !project.isActive;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}